# coding: utf-8

#把目录下的文档名及相关信息存入电子表格，并打开文件

import os
import win32ui
from win32com.client import Dispatch, constants, gencache
import configparser

def select_path(currentPath):
    '''
    通过使用对话窗口选择文件确定目录
    :return: 选择的路径名
    '''

    #设置起始路径,如果目标路径不存在，则选择当前路径
    if os.path.isdir(currentPath):
        os.chdir(currentPath)
    else:
        print('目录不存在:',currentPath)
        currentPath = os.getcwd()

    print("当前目录：%s"%(currentPath))

    dlg = win32ui.CreateFileDialog(1)  # 1表示打开文件对话框
    dlg.SetOFNInitialDir(currentPath)  # 设置打开文件对话框中的初始显示目录
    flag = dlg.DoModal()
    if flag == 2:
        print("未选择文件，程序退出")
        exit(1)

    filename = dlg.GetPathName()  # 获取选择的文件名称
    dlg.GetPathName()

    strSelectPath = os.path.dirname(filename)
    os.chdir(strSelectPath)

    currentPath = os.getcwd()
    print("当前目录：{}".format(currentPath))
    return currentPath

#打开word文件执行宏处理并保存
def word_VBA(filename):
    input = filename + '.docx'

    # 判断文件是否存在
    os.chdir(currentPath)
    if not os.path.isfile(input):
        print('%s not exist' % input)
        return False
    # 文档路径需要为绝对路径，因为Word启动后当前路径不是调用脚本时的当前路径。
    if (not os.path.isabs(input)):  # 判断是否为绝对路径
        # os.chdir(REPORT_DOC_PATH)
        input = os.path.abspath(input)  # 返回绝对路径
    else:
        print('%s not absolute path' % input)
        return False

    try:
        # enable python COM support for Word 2007
        # this is generated by: makepy.py -i "Microsoft Word 12.0 Object Library"
        gencache.EnsureModule('{00020905-0000-0000-C000-000000000046}', 0, 8, 4)
        # 开始转换
        w = Dispatch("Word.Application")
        try:
            #打开文件允许写入,Visible=True才能执行宏
            doc = w.Documents.Open(input, ReadOnly=False, Visible=True)
            #'manage'为宏程序
            doc.Application.Run('manage')
        except Exception as e:
            print('执行宏程序不成功:',e)
        finally:
            w.Quit(constants.wdSaveChanges)

    except Exception as e:
        print('启动Word.Application不成功:',e)
        return -1

if __name__ == '__main__':

    #从配置文件中记取设置信息
    if os.path.isfile('path.ini'):#判断文件是否存在
        #从文件中读取配置信息
        config = configparser.ConfigParser()
        try:
            config.read('path.ini')
            currentPath = config['Path']['Target']
            Select = config['Path']['Select']
        except NameError as e:
            print('配置信息未定义:', e)
        except Exception as e:
            print('错误信息:', e)
    else:
        print('path.ini不存在')

    #设置需要处理的目录

    if os.path.isdir(currentPath):
        os.chdir(currentPath)
    else:
        # 使用对话框选择路径
        currentPath = select_path(currentPath)
        #不再需要重新选择路径
        Select = 0

    if Select == 1 or Select == 'Y' or  Select == 'y':
        # 使用对话框选择路径
        currentPath = select_path(currentPath)

    currentPath = os.getcwd()
    print("当前目录：%s" % (currentPath))

    #调用宏处理word文件
    #调用宏进行格式处理
    for dirpath, dirnames, filenames in os.walk(currentPath):
        for file in filenames:
            #只转换后缀名为“.docx”的文件
            if os.path.splitext(file)[1]=='.docx':
                #调用宏进行格式处理
                print(os.path.abspath(file))
                word_VBA(file.rstrip('.docx'))
                

